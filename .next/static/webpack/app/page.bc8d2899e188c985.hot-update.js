"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/filterQuestions.utils.ts":
/*!****************************************!*\
  !*** ./utils/filterQuestions.utils.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterQuestionsByCategory: function() { return /* binding */ filterQuestionsByCategory; },\n/* harmony export */   groupQuestionsByCategory: function() { return /* binding */ groupQuestionsByCategory; }\n/* harmony export */ });\n/**\n * @function filterQuestionsByCategory 주어진 카테고리에 따라 질문을 필터링하여 반환하는 함수\n * @param questions - 전체 질문 리스트\n * @param category - 선택된 카테고리\n * @returns 선택된 카테고리의 질문 리스트\n */ const filterQuestionsByCategory = (questions, category)=>{\n    const filteredQuestions = [];\n    questions[category].forEach((question)=>{\n        filteredQuestions.push({\n            question,\n            category\n        });\n    });\n    return filteredQuestions;\n};\n/**\n * 주어진 질문 배열을 카테고리별로 그룹화하는 함수\n * @param questions - 전체 질문 리스트\n * @returns 카테고리별로 그룹화된 질문 리스트\n */ const groupQuestionsByCategory = (questions)=>{\n    const groupedQuestions = {};\n    questions.forEach((param)=>{\n        let { category, question } = param;\n        if (!groupedQuestions[category]) {\n            groupedQuestions[category] = [];\n        }\n        groupedQuestions[category].push(question);\n    });\n    return groupedQuestions;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL2ZpbHRlclF1ZXN0aW9ucy51dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUdBOzs7OztDQUtDLEdBQ00sTUFBTUEsNEJBQTRCLENBQ3ZDQyxXQUNBQztJQUVBLE1BQU1DLG9CQUFvQyxFQUFFO0lBRTVDRixTQUFTLENBQUNDLFNBQVMsQ0FBQ0UsT0FBTyxDQUFDLENBQUNDO1FBQzNCRixrQkFBa0JHLElBQUksQ0FBQztZQUFFRDtZQUFVSDtRQUFTO0lBQzlDO0lBRUEsT0FBT0M7QUFDVCxFQUFFO0FBRUY7Ozs7Q0FJQyxHQUNNLE1BQU1JLDJCQUEyQixDQUN0Q047SUFFQSxNQUFNTyxtQkFBcUMsQ0FBQztJQUU1Q1AsVUFBVUcsT0FBTyxDQUFDO1lBQUMsRUFBRUYsUUFBUSxFQUFFRyxRQUFRLEVBQUU7UUFDdkMsSUFBSSxDQUFDRyxnQkFBZ0IsQ0FBQ04sU0FBUyxFQUFFO1lBQy9CTSxnQkFBZ0IsQ0FBQ04sU0FBUyxHQUFHLEVBQUU7UUFDakM7UUFDQU0sZ0JBQWdCLENBQUNOLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDRDtJQUNsQztJQUVBLE9BQU9HO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9maWx0ZXJRdWVzdGlvbnMudXRpbHMudHM/YTJmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVzdGlvbkxpc3RUeXBlIH0gZnJvbSBcIi4uL2RhdGEvdHlwZVwiO1xuaW1wb3J0IHsgUXVlc3Rpb25JdGVtIH0gZnJvbSBcIi4uL3R5cGVzL3R5cGVcIjtcblxuLyoqXG4gKiBAZnVuY3Rpb24gZmlsdGVyUXVlc3Rpb25zQnlDYXRlZ29yeSDso7zslrTsp4Qg7Lm07YWM6rOg66as7JeQIOuUsOudvCDsp4jrrLjsnYQg7ZWE7YSw66eB7ZWY7JesIOuwmO2ZmO2VmOuKlCDtlajsiJhcbiAqIEBwYXJhbSBxdWVzdGlvbnMgLSDsoITssrQg7KeI66y4IOumrOyKpO2KuFxuICogQHBhcmFtIGNhdGVnb3J5IC0g7ISg7YOd65CcIOy5tO2FjOqzoOumrFxuICogQHJldHVybnMg7ISg7YOd65CcIOy5tO2FjOqzoOumrOydmCDsp4jrrLgg66as7Iqk7Yq4XG4gKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXJRdWVzdGlvbnNCeUNhdGVnb3J5ID0gKFxuICBxdWVzdGlvbnM6IFF1ZXN0aW9uTGlzdFR5cGUsXG4gIGNhdGVnb3J5OiBrZXlvZiBRdWVzdGlvbkxpc3RUeXBlXG4pOiBRdWVzdGlvbkl0ZW1bXSA9PiB7XG4gIGNvbnN0IGZpbHRlcmVkUXVlc3Rpb25zOiBRdWVzdGlvbkl0ZW1bXSA9IFtdO1xuXG4gIHF1ZXN0aW9uc1tjYXRlZ29yeV0uZm9yRWFjaCgocXVlc3Rpb24pID0+IHtcbiAgICBmaWx0ZXJlZFF1ZXN0aW9ucy5wdXNoKHsgcXVlc3Rpb24sIGNhdGVnb3J5IH0pO1xuICB9KTtcblxuICByZXR1cm4gZmlsdGVyZWRRdWVzdGlvbnM7XG59O1xuXG4vKipcbiAqIOyjvOyWtOynhCDsp4jrrLgg67Cw7Je07J2EIOy5tO2FjOqzoOumrOuzhOuhnCDqt7jro7ntmZTtlZjripQg7ZWo7IiYXG4gKiBAcGFyYW0gcXVlc3Rpb25zIC0g7KCE7LK0IOyniOusuCDrpqzsiqTtirhcbiAqIEByZXR1cm5zIOy5tO2FjOqzoOumrOuzhOuhnCDqt7jro7ntmZTrkJwg7KeI66y4IOumrOyKpO2KuFxuICovXG5leHBvcnQgY29uc3QgZ3JvdXBRdWVzdGlvbnNCeUNhdGVnb3J5ID0gKFxuICBxdWVzdGlvbnM6IFF1ZXN0aW9uSXRlbVtdXG4pOiBRdWVzdGlvbkxpc3RUeXBlID0+IHtcbiAgY29uc3QgZ3JvdXBlZFF1ZXN0aW9uczogUXVlc3Rpb25MaXN0VHlwZSA9IHt9O1xuXG4gIHF1ZXN0aW9ucy5mb3JFYWNoKCh7IGNhdGVnb3J5LCBxdWVzdGlvbiB9KSA9PiB7XG4gICAgaWYgKCFncm91cGVkUXVlc3Rpb25zW2NhdGVnb3J5XSkge1xuICAgICAgZ3JvdXBlZFF1ZXN0aW9uc1tjYXRlZ29yeV0gPSBbXTtcbiAgICB9XG4gICAgZ3JvdXBlZFF1ZXN0aW9uc1tjYXRlZ29yeV0ucHVzaChxdWVzdGlvbik7XG4gIH0pO1xuXG4gIHJldHVybiBncm91cGVkUXVlc3Rpb25zO1xufTtcbiJdLCJuYW1lcyI6WyJmaWx0ZXJRdWVzdGlvbnNCeUNhdGVnb3J5IiwicXVlc3Rpb25zIiwiY2F0ZWdvcnkiLCJmaWx0ZXJlZFF1ZXN0aW9ucyIsImZvckVhY2giLCJxdWVzdGlvbiIsInB1c2giLCJncm91cFF1ZXN0aW9uc0J5Q2F0ZWdvcnkiLCJncm91cGVkUXVlc3Rpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/filterQuestions.utils.ts\n"));

/***/ })

});